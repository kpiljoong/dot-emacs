#+TITLE: hkk :: core

** Startup
#+begin_src elisp

;;(setq debug-on-error t)
(message "hkk :: core")

#+end_src

** Variables
#+begin_src elisp
  (defvar hkk-command-key ":")
  (defvar hkk-leader-key "SPC")
  (defvar hkk-major-mode-leader-key ",")
#+end_src

#+begin_src elisp
  (defvar hkk-default-map (make-sparse-keymap))

  (defvar hkk-toggles '())

  (defvar hkk-command-key "SPC")
  (defvar hkk-emacs-command-key "SPC")
  ;(defalias 'hkk-emacs-command-key 'hkk-command-key)
#+end_src

#+begin_src elisp
  (defvar hkk-default-map (make-sparse-keymap))

  (defvar hkk--diminished-minor-modes nil
    "List of diminished modes to unicode or ascii values.")

  (defvar hkk-repl-list '())

  (defvar hkk-search-tools '("ag"))
#+end_src

#+begin_src elisp
  (defvar-local hkk--gne-min-line nil)
  (defvar-local hkk--gne-max-line nil)
  (defvar-local hkk--gne-cur-line 0)
  (defvar-local hkk--gne-line-func nil)
#+end_src


** Configurations

#+begin_src elisp
    (when (or (eq system-type 'windows-nt) (eq system-type 'msdos))
      (setenv "PATH" (concat "C:\\Users\\ethan\\emacs\\bin;" (getenv "PATH")))
      (setenv "PATH" (concat "C:\\msys64\\usr\\bin;" (getenv "PATH")))
      (setenv "PATH" (concat "C:\\msys64\\mingw64\\bin;" (getenv "PATH")))
      (setq exec-path (append exec-path '("C:\\msys64\\usr\\bin")))
      (setq exec-path (append exec-path '("C:\\msys64\\mingw64\\bin"))))

  ;    (setq find-program "C:\\msys64\\usr\\bin\\find.exe"
  ;          grep-program "C:\\msys64\\usr\\\\bin\\grep.exe"))
  ;    (setq find-program "C:\\Users\\ethan\\emacs\\bin\\find.exe"
  ;          grep-program "C:\\Users\\ethan\\emacs\\bin\\grep.exe"))
#+end_src

Opening Large Files - Warn when opening files bigger than 100MB.
#+begin_src elisp
(setq large-file-warning-threshold 100000000)
#+end_src

#+begin_src elisp
  (defvar hkk-auto-save-folder "~/.emacs.d/.saves/"
    "Directory used for Emacs backups.")

  (setq backup-directory-alist `(("." . "~/.emacs.d/.saves")))
  (setq auto-save-file-name-transforms
        `((".*" ,hkk-auto-save-folder t)))
#+end_src

Enable global-auto-revert-mode.
#+begin_src elisp
  (global-auto-revert-mode 1)
#+end_src

Also, auto refresh dired.
#+begin_src elisp
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)
#+end_src

No beep!
#+begin_src elisp
  (setq ring-bell-function 'ignore
        visible-bell nil)
#+end_src

Don't display the startup screen and message.
#+begin_src elisp
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
#+end_src

#+begin_src elisp
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  (setq linum-format "%4d")

  (global-hl-line-mode t)

  (visual-line-mode 1)
#+end_src

No lockfiles.
#+begin_src elisp
  (setq create-lockfiles nil)
#+end_src

Use only spaces instead of tabs.
#+begin_src elisp
  (setq-default indent-tabs-mode nil
                tab-width 2)
#+end_src

Use system trash for file deletion
#+begin_src elisp
  (setq delete-by-moving-to-trash t)
#+end_src



** Display

Display column/row of cursor.
#+begin_src elisp
  (column-number-mode 1)
#+end_src

Display line number.
#+begin_src elisp
  (line-number-mode t)
#+end_src

Display size indication.
#+begin_src elisp
  (size-indication-mode t)
#+end_src



No cursor blinking.
#+begin_src elisp
  (blink-cursor-mode 0)
#+end_src

Show line numbers.
#+begin_src elisp
  (global-linum-mode 1)
#+end_src


Highlight current line
#+begin_src elisp
  (global-hl-line-mode t)
#+end_src

#+begin_src elisp
  (setq scroll-conservatively 9999
        scroll-preserve-screen-position t)
#+end_src

Use y/n instead of yes/no.
#+begin_src elisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

Use mouse cursor in terminal mode.
#+begin_src elisp
  (xterm-mouse-mode 1)
#+end_src

Display the current function name in the modeline.
#+begin_src elisp
  (which-function-mode 0)
#+end_src

Disable fringe.
#+begin_src elisp
  (fringe-mode '(0 . 0))
#+end_src

#+begin_src elisp
  (defvar hkk-default-font "Source Code Pro")
  (set-face-attribute 'default nil :font hkk-default-font)
  (set-frame-font hkk-default-font nil t)
  ;(hkk/set-default-font hkk-default-font)
#+end_src

** Macros

Diminish
#+begin_src elisp
  (defmacro hkk|diminish (mode &optional unicode ascii)
    "Diminish MODE name in mode line to UNICODE or ASCII depending on the value"
    `(let ((cell (assq ',mode hkk--diminished-minor-modes)))
       (if cell
           (setcdr cell '(,unicode ,ascii))
         (push '(,mode ,unicode ,ascii) hkk--diminished-minor-modes))))
#+end_src

Toggle
#+begin_src elisp
  (defmacro hkk|add-toggle (name &rest props)
    "Add a toggle with NAME symbol."
    (declare (indent 1))
    (let* ((wrapper-func (intern (format "hkk/toggle-%s"
                                         (symbol-name name))))
           (wrapper-func-status (intern (format "%s-p" wrapper-func)))
           (wrapper-func-on (intern (format "%s-on" wrapper-func)))
           (wrapper-func-off (intern (format "%s-off" wrapper-func)))
           (mode (plist-get props :mode))
           (status (or mode (plist-get props :status)))
           (condition (plist-get props :if))
           (doc (plist-get props :if))
           (on-body (if mode `((,mode)) (hkk/mplist-get props :on)))
           (off-body (if mode `((,mode -1)) (hkk/mplist-get props :off)))
           (prefix-arg-var (plist-get props :prefix))
           (on-message (plist-get props :prefix))
           (bindkeys (hkk//create-key-binding-form props wrapper-func))
           (status-eval `(and (or (and (symbolp ',status) (boundp ',status))
                                  (listp ',status))
                              ,status)))
      `(progn
         (push (append '(,name) '(:function ,wrapper-func
                                            :predicate ,wrapper-func-status) ',props)
               hkk-toggles)
         (defun ,wrapper-func ,(if prefix-arg-var (list prefix-arg-var) ())
           ,(format "Toggle %s on and off." (symbol-name name))
           ,(if prefix-arg-var '(interactive "P") '(interactive))
           (if (or (null ',condition)
                   (and (or (and (symbolp ',condition) (boundp ',condition))
                            (listp ',condition))
                        ,condition))
               (if (,wrapper-func-status)
                   (progn ,@off-body
                          (when (called-interactively-p 'any)
                            (message ,(format "%s disabled." name))))
                 ,@on-body
                 (when (called-interactively-p 'any)
                   (message ,(or on-message (format "%s enabled." name)))))
                 (message "This toggle is not supported.")))
         (defun ,wrapper-func-status ()
           ,(format "Check if %s is on." (symbol-name name))
           ,status-eval)
         ,@(when status
             `((defun ,wrapper-func-on ()
                 ,(format "Toggle %s on." (symbol-name name))
                 (interactive)
                 (unless (,wrapper-func-status) (,wrapper-func)))
               (defun ,wrapper-func-off ()
                 ,(format "Toggle %s off." (symbol-name name))
                 (interactive)
                 (when (,wrapper-func-status) (,wrapper-func)))))
         ,@bindkeys)))
#+end_src


Make eval-after-load more cleaner since it is well used.
#+begin_src elisp
  (defmacro after (mode &rest body)
    (declare (indent defun))
    `(eval-after-load ,mode
       '(progn ,@body)))
#+end_src

** Functions
#+begin_src elisp
  (defun hkk/mplist-get (plist prop)
    (let ((tail plist)
          result)
      (while (and (consp tail) (not (eq prop (car tail))))
        (pop tail))
      (pop tail)
      (while (and (consp tail) (not (keywordp (car tail))))
        (push (pop tail) result))
      (nreverse result)))

  (defun hkk//create-key-binding-form (props func)
    (let ((evil-leader (hkk/mplist-get props :evil-leader))
          (evil-leader-for-mode (hkk/mplist-get props :evil-leader-for-mode))
          (global-key (hkk/mplist-get props :global-key))
          (def-key (hkk/mplist-get props :define-key)))
      (append
       (when evil-leader
         `((dolist (key ',evil-leader)
             (hkk/set-leader-keys key ',func))))
       (when evil-leader-for-mode
         `((dolist (val ',evil-leaderfor-mode)
             (hkk/set-leader-keys-for-major-mode
              (car val) (cdr val) ',func))))
       (when global-key
         `((dolist (key ',global-key)
             (global-set-key (kbd key) ',func))))
       (when def-key
         `((dolist (val ',def-key)
             (define-key (eval (car val)) (kbd (cdr val)) ',func)))))))

  (defun hkk/set-leader-keys (key def &rest bindings)
    (while key
      (define-key hkk-default-map (kbd key) def)
      (setq key (pop bindings) def (pop bindings))))
  (put 'hkk/set-leader-keys 'lisp-indent-function 'defun)
  (defalias 'evil-leader/set-key 'hkk/set-leader-keys)

  (defun hkk//acceptable-leader-p (key)
    (and (stringp key) (not (string= key ""))))

  (defun hkk//init-leader-mode-map (mode map &optional minor)
    (let* ((prefix (intern (format "%s-prefix" map)))
           (leader1 (when (hkk//acceptable-leader-p
                           hkk-major-mode-leader-key)
                      hkk-major-mode-leader-key))
           (leader2 (when (hkk//acceptable-leader-p
                           hkk-leader-key)
                      (concat hkk-leader-key " m")))
           (leaders (delq nil (list leader1 leader2))))
      (or (boundp prefix)
          (progn
            (eval
             `(bind-map ,map
                :prefix-cmd ,prefix
                ,(if minor :minor-modes :major-modes) (,mode)
                :evil-keys ,leaders
                :evil-states (normal motion visual evilified)))
            (boundp prefix)))))


  (defun hkk/set-leader-keys-for-major-mode (mode key def &rest bindings)
    (let* ((map (intern (format "hkk-%s-map" mode))))
      (when (hkk//init-leader-mode-map mode map)
        (while key
          (define-key (symbol-value map) (kbd key) def)
          (setq key (pop bindings) def (pop bindings))))))

  (defalias 'evil-leader/set-key-for-mode
    'hkk/set-leader-keys-for-major-mode)

  (defun hkk/set-leader-keys-for-minor-mode (mode key def &rest bindings)
    (let* ((map (intern (format "hkk-%s-map" mode))))
      (when (hkk//init-leader-mode-map mode map t)
        (while key
          (define-key (symbol-value map) (kbd key) def)
          (setq key (pop bindings) def (pop bindings))))))
  (put 'hkk/set-leader-keys-for-minor-mode 'lisp-indent-function 'defun)

  (defvar hkk-useful-buffers-regexp
    '("\\*\\(scratch\\|terminal\.\+\\|ansi-term\\|eshell\\)\\*"))

  (defvar hkk-useless-buffers-regexp
    '("*\.\+"))

  (defun hkk/useless-buffer-p (buffer)
    (let ((buf-paren-major-mode (get (with-current-buffer buffer major-mode)
                                     'derived-mode-parent))
          (buf-name (buffer-name buffer)))
      (unless (cl-loop for regexp in hkk-useful-buffers-regexp do
                       (when (or (eq buf-paren-major-mode 'comint-mode)
                                 (string-match regexp buf-name))
                         (return t)))
        (cl-loop for regexp in hkk-useful-buffers-regexp do
                 (when (string-match regexp buf-name)
                   (return t))))))

  (defun hkk/next-buffer ()
    (interactive)
    (let ((start-buffer (current-buffer)))
      (next-buffer)
      (while (and (hkk/useless-buffer-p (current-buffer))
                  (not (eq (current-buffer) start-buffer)))
        (next-buffer))))

  (defun hkk/previous-buffer ()
    (interactive)
    (let ((start-buffer (current-buffer)))
      (previous-buffer)
      (while (and (hkk/useless-buffer-p (current-buffer))
                  (not (eq (current-buffer) start-buffer)))
        (previous-buffer))))

  (defun hkk/new-empty-buffer ()
    "Create a new empty buffer"
    (interactive)
    (let ((newbf (generate-new-buffer-name "untitled")))
      (switch-to-buffer newbf)))

  (defun hkk/alternate-buffer (&optional window)
    "Switch back and forth between current and last buffer in the current window."
    (interactive)
    (let ((current-buffer (window-buffer window))
          (buffer-predicate
           (frame-parameter (window-frame window) 'buffer-predicate)))
      (switch-to-buffer
       (or (cl-find-if (lambda (buffer)
                         (and (not (eq buffer current-buffer))
                              (or (null buffer-predicate)
                                  (funcall buffer-predicate buffer))))
                       (mapcar #'car (window-prev-buffers window)))
           (other-buffer current-buffer t)))))

  (defun hkk/alternate-window ()
    "Switch back and forth between current and last window in the current frame."
    (interactive)
    (let ((prev-window (get-mru-window nil t t)))
      (unless prev-window (user-error "Last window not found."))
      (select-window prev-window)))

  (defun hkk/split-window-below-and-focus ()
    "Split the window vertically and focus the new window."
    (interactive)
    (split-window-below)
    (windmove-down))

  (defun hkk/split-window-right-and-focus ()
    "Split the window horizontally and focus the new window."
    (interactive)
    (split-window-right)
    (windmove-down))

  (defun hkk/delete-window (&optional arg)
    "Delete the current window."
    (interactive "P")
    (if (equal '(4) arg)
        (kill-buffer-and-window)
      (delete-window)))

  (defun hkk/toggle-frame-fullscreen ()
    "Toggling fullscreen"
    (interactive)
    (toggle-frame-fullscreen))

  (defun hkk/kill-frame ()
    (interactive)
    (condition-case-unless-debug nil
        (delete-frame nil 1)
      (error
       (make-frame-invisible nil 1))))

  (defun hkk/scale-up-or-down-font-size (direction)
    (interactive)
    (let ((scale 0.5))
      (if (eq direction 0)
          (text-scale-set 0)
        (if (< direction 0)
            (text-scale-decrease scale)
          (text-scale-increase scale)))))

  (defun hkk/scale-up-font ()
    (interactive)
    (hkk/scale-up-or-down-font-size 1))

  (defun hkk/scale-down-font ()
    (interactive)
    (hkk/scale-up-or-down-font-size -1))

  (defun hkk/reset-font-size ()
    (interactive)
    (hkk/scale-up-or-down-font-size 0))

  (defun hkk/update-emacs-title ()
    (if (buffer-file-name (current-buffer))
        (setq frame-title-format "hkk - %f")
      (setq frame-title-format "hkk - %b")))

  (defun hkk//helm-find-files-edit (candidate)
    (dired (file-name-directory candidate))
    (dired-goto-file candidate)
    (dired-toggle-read-only))

  (defun hkk/helm-find-files-edit ()
    (interactive)
    (helm-exit-and-execute-action 'hkk//helm-find-files-edit))

  (defun hkk/gne-next (num reset)
    (when reset (setq hkk--gne-cur-line
                      hkk--gne-min-line))
    (setq hkk--gen-cur-line
          (min hkk--gne-max-line
               (max hkk--gne-min-line
                    (+ num hkk--gne-cur-line))))
    (goto-line hkk--gne-cur-line)
    (funcall hkk--gne-line-func
             (buffer-substring (point-at-bol) (point-at-eol))))

  (defun hkk//gne-init-helm-ag (&rest args)
    (with-current-buffer "*helm ag results*"
      (setq hkk--gne-min-line 5
            hkk--gne-max-line (save-excursion
              (goto-char (point-max))
              (previous-line)
              (line-number-at-pos))
            hkk--gne-line-func
            (lambda (c)
              (helm-ag--find-file-action
               c 'find-file helm-ag--search-this-file-p))
            next-error-function 'hkk/gne-ext)))

  (defun hkk//helm-cleanup ()
    (setq overriding-terminal-local-map nil))
#+end_src

#+begin_src elisp
  (cl-dolist (hook '(buffer-list-update-hook
                     change-major-mode-hook
                     find-file-hook))
    (add-hook hook 'hkk/update-emacs-title))
#+end_src

** Required packages

*** Common lisp primitives

#+begin_src elisp
(require 'cl)
#+end_src

Packages which should be loaded on startup rather than autoloaded on demand
#+begin_src elisp
(require 'cl-lib)
(require 'saveplace)
(require 'ffap)
(require 'ansi-color)
#+end_src


*** Uniquify

Better names for duplicate buffers.
#+begin_src elisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward
          uniquify-separator "/"
          ;; leave special buffers alone
          uniquify-ignore-buffers-re "^\\*"
          uniquify-after-kill-buffer-p t))
#+end_src

** ELPA archive repositories
#+begin_src elisp
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("org" . "http://orgmode.org/elpa/")
          ("melpa" . "https://melpa.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

#+begin_src elisp
  (defun hkk/load-or-install-package (pkg)
    (package-install pkg)
    (require pkg nil 'noerror))
#+end_src

** Install boostrap packages
#+begin_src elisp
(hkk/load-or-install-package 'bind-map)
(hkk/load-or-install-package 'bind-key)
(hkk/load-or-install-package 'which-key)
(hkk/load-or-install-package 'use-package)
#+end_src

#+begin_src elisp
(defun hkk/open-emacs-directory ()
  (interactive)
  (dired "~/.emacs.d/"))
#+end_src

#+begin_src elisp
(require 'hkk-evil)
(require 'hkk-theme)

(if (eq system-type 'darwin)
    (require 'hkk-osx))
#+end_src


** exec-path-from-shell
#+begin_src elisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src


** Which key
#+begin_src elisp
  (use-package which-key
    :init
    (progn
      (hkk/set-leader-keys "hk" 'which-key-show-top-level)
      (setq which-key-special-keys nil
            which-key-use-C-h-for-paging t
            which-key-prevent-C-h-from-cycling t
            which-key-echo-keystrokes 0.02
            which-key-max-description-length 32
            which-key-sort-order 'which-key-key-order-alpha
            which-key-idle-delay 0.3
            which-key-allow-evil-operators t)
      (which-key-mode)
      (hkk|diminish which-key-mode " Ⓚ" " K")))
#+end_src

** Bind map
#+begin_src elisp

  (use-package bind-map
    :init
    (bind-map hkk-default-map
      :prefix-cmd hkk-cmds
      :evil-keys (hkk-leader-key)
      :override-minor-modes t
      :override-mode-name hkk-leader-override-mode))

#+end_src

Company.
#+begin_src elisp
    (use-package company
      :ensure t
      :init
      (progn
        (message "global-company-mode")
        (add-hook 'after-init-hook 'global-company-mode)

        (setq company-idle-delay 0.2
              company-minimum-prefix-length 2
              company-require-match nil
              company-dabbrev-ignore-case nil
              company-dabbrev-downcase nil)
        (defvar-local company-fci-mode-on-p nil)

        (defun company-turn-off-fci (&rest ignore)
          (when (boundp 'fci-mode)
            (setq company-fci-mode-on-p fci-mode)
            (when fci-mode (fci-mode -1))))
        (defun company-maybe-turn-on-fci (&rest ignore)
          (when company-fci-mode-on-p (fci-mode 1)))

        (add-hook 'company-completion-started-hook 'company-turn-off-fci)
        (add-hook 'company-completion-finished-hook 'company-maybe-turn-on-fci)
        (add-hook 'company-completion-cancelled-hook 'company-maybe-turn-on-fci))
      :config
      (progn
        (custom-set-faces
         '(company-tooltip-common
           ((t (:inherit company-tooltip :weight bold :underline nil))))
         '(company-tooltip-common-selection
           ((t (:inherit company-tooltip-selection :weight bold :underilne nil))))))
      :diminish company-mode)

#+end_src

Diminish.
#+begin_src elisp
  (use-package diminish
    :init
    (progn
      (with-eval-after-load 'abbrev
        (diminish 'abbrev-mode))
      (with-eval-after-load 'hi-lock
        (diminish 'hi-lock-mode))
      (with-eval-after-load 'subword
        (diminish 'subword-mode))))
#+end_src

ido.
#+begin_src elisp
  (ido-mode t)

  (setq ido-save-directory-list-file (concat hkk-emacs-cache-directory "ido.last")
        ido-enable-flex-matching t)

  (use-package ido-vertical-mode
    :ensure t
    :init
    (progn
      (ido-vertical-mode t)

      (defun hkk/ido-setup ()
        (define-key ido-completion-map (kbd "C-<return>") 'ido-select-text)
        (define-key ido-completion-map (kbd "C-h") 'ido-delete-backward-updir)
        (define-key ido-completion-map (kbd "<up>") 'ido-prev-match)
        (define-key ido-completion-map (kbd "<down>") 'ido-next-match)
        (define-key ido-completion-map (kbd "<left>") 'ido-delete-backward-updir)
        (define-key ido-completion-map (kbd "<right>") 'ido-exit-minibuffer)
        )
      (add-hook 'ido-setup-hook 'hkk/ido-setup)))
#+end_src

Flx ido
#+begin_src elisp
  (use-package flx-ido
    :ensure t
    :init
    (flx-ido-mode 1))
#+end_src

** Windows
Initial window size
#+begin_src elisp
  (setq initial-frame-alist
        '((width . 102)
          (height . 52)))

  (setq default-frame-alist
        '((width . 100)
          (height . 50)))

#+end_src

#+begin_src elisp
#+end_src

#+begin_src elisp
#+end_src

Make cursor a vertical bar.
#+begin_src elisp
  (setq-default cursor-type 'bar)
#+end_src

Hide mouse cursor while typing.
#+begin_src elisp
  (setq make-pointer-invisible t)
#+end_src

Enable copy/paste from emacs to other apps.
#+begin_src elisp
  (setq
   interprogram-cut-function 'x-select-text
   interprogram-paste-function 'x-selection-value
   save-interprogram-paste-before-kill t
   select-active-regions t
   x-select-enable-clipboard t
   x-select-enable-primary t)
#+end_src

Set UTF encoding.

Make sure UTF-8 is used everywehre.

#+begin_src elisp
  (set-language-environment 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8-unix)
#+end_src

Every buffer would be cleaned up before it's saved.
#+begin_src elisp
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src


** Helm
#+begin_src elisp
  (use-package helm
    :ensure t
    :defer 1
    :commands (hkk/helm-find-files)
    :config
    (progn
      (helm-mode)
      (setq helm-autoresize-min-height 10)
      (helm-autoresize-mode 1)
      (helm-locate-set-command)

      (defun hkk/helm-find-files (arg)
        (interactive "P")
        (let* ((hist (and arg helm-ff-history (helm-find-files-history)))
               (default-input hist)
               (input (cond ((and (eq major-mode 'dired-mode) default-input)
                             (file-name-directory default-input))
                            ((and (not (string= default-input ""))
                                  default-input))
                            (t (expand-file-name (helm-current-directory))))))
          (set-text-properties 0 (length input) nil input)
          (helm-find-files-1 input)))

      (defun helm-available-repls ()
        (interactive)
        (let ((helm-available-repls
               `((name . "HELM available REPLs")
                 (candidates . ,(mapcar #'car hkk-repl-list))
                 (action . (lambda (candidate)
                             (let ((repl (cedr (assoc candidate hkk-repl-list))))
                               (require (car repl))
                               (call-interactively (cdr repl))))))))
          (helm :sources '(helm-available-repls)
                :buffer "*helm repls")))

      (defvar helm-source-header-default-background (face-attribute 'helm-source-header :background))
      (defvar helm-source-header-default-foreground (face-attribute 'helm-source-header :foreground))
      (defvar helm-source-header-default-box (face-attribute 'helm-source-header :box))
      (defvar helm-source-header-default-height (face-attribute 'helm-source-header :height)))
    :init
    (progn
      (add-hook 'helm-cleanup-hook #'hkk//helm-cleanup)
      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "C-x C-f") 'hkk/helm-find-files)
      (global-set-key (kbd "C-x b") 'helm-buffers-list)

      (setq helm-prevent-escaping-from-minibuffer t
            helm-bookmark-show-location t
            helm-display-header-line nil
            helm-split-window-in-side-p t
            helm-always-two-windows t
            helm-echo-input-in-header-line t
            helm-imenu-execute-action-at-once-if-one nil
            helm-org-format-outline-path t)
      (setq helm-M-x-fuzzy-atch t
            helm-apropos-fuzzy-match t
            helm-file-cache-fuzzy-match t
            helm-lisp-fuzzy-completion t
            helm-recentf-fuzzy-match t
            helm-semantic-fuzzy-match t
            helm-buffers-fuzzy-matching t)
      (hkk/set-leader-keys
       "<f1>" 'helm-apropos
       "a'" 'helm-available-repls
       "bb"  'helm-mini
       "Cl" 'helm-colors
       "ff" 'hkk/helm-find-files
       "fF" 'helm-find-files
       "fL" 'helm-locate
       "fr" 'helm-recentf
       "hdd" 'helm-apropos
       "hb" 'helm-filtered-bookmarks
       "hm" 'helm-man-woman
       "iu" 'helm-ucs
       "rl" 'helm-resume
       "rr" 'helm-register
       "rs" 'hkk/resume-last-search-buffer
       "ry" 'helm-show-kill-ring
       "sl" 'hkk/resume-last-search-buffer
       "sj" 'hkk/helm-jump-in-buffer
       "rm" 'helm-all-mark-rings)
      (after 'helm-files
        (define-key helm-find-files-map
          (kbd "C-c C-e") 'hkk/helm-find-files-edit))
      (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history)
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (hkk/set-leader-keys
                   hkk-emacs-command-key 'helm-M-x)))))

#+end_src

*** Helm descbinds
#+begin_src elisp
  (use-package helm-descbinds
    :ensure t
    :defer t
    :init
    (progn
      (setq helm-descbinds-window-style 'split)
      (add-hook 'helm-mode-hook 'helm-descbinds-mode)
      (hkk/set-leader-keys "?" 'helm-descbinds)))
#+end_src

*** Helm flx
#+begin_src elisp
  (use-package helm-flx
    :ensure t
    :defer t)
#+end_src

*** Helm ag
#+begin_src elisp
  (use-package helm-ag
    :ensure t
    :defer t
    :init
    (progn
      (defun hkk//helm-do-ag-region-or-symbol (func &optional dir)
        (require 'helm-ag)
        (cl-letf* (((symbol-value 'helm-ag-insert-at-point) 'symbol)
                   ((symbol-function 'this-fn) (symbol-function 'thing-at-point))
                   ((symbol-function 'thing-at-point)
                    (lambda (thing)
                      (let ((res (if (region-active-p)
                                     (buffer-substring-no-properties
                                      (region-beginning) (region-end))
                                   (this-fn thing))))
                        (when res (rxt-quote-pcre res))))))
          (funcall func dir)))

      (defun hkk//helm-do-search-find-tool (base tools default-inputp)
        (eval
         `(cond
           ,@(mapcar
              (lambda (x)
                `((executable-find ,x)
                  ',(let ((func
                           (intern
                            (format (if default-inputp
                                        "hkk/%s-%s-region-or-symbol"
                                      "hkk/%s-%s")
                                    base x))))
                      (if (fboundp func)
                          func
                        (intern (format "%s-%s" base x))))))
              tools)
           (t 'helm-do-grep))))

      ;; Buffers
      (defun hkk/helm-buffers-do-ag (&optional _)
        (interactive)
        (helm-do-ag-buffers))

      (defun hkk/helm-buffers-do-ag-region-or-symbol ()
        (interactive)
        (hkk//helm-do-ag-region-or-symbol 'hkk/helm-buffers-do-ag))

      (defun hkk/helm-buffers-smart-do-search (&optional default-inputp)
        (interactive)
        (call-interactively
         (hkk//helm-do-search-find-tool "helm-buffers-do"
                                        hkk-search-tools
                                        default-inputp)))

      (defun hkk/helm-buffers-smart-do-search-region-or-symbol ()
        (interactive)
        (hkk/helm-buffers-smart-do-search t))

      ;; files
      (defun hkk/helm-files-do-ag (&optional dir)
        (interactive)
        (helm-do-ag dir))

      (defun hkk/helm-files-smart-do-search (&optional default-inputp)
        (interactive)
        (call-interactively
         (hkk//helm-do-search-find-tool "helm-files-do"
                                        hkk-search-tools
                                        default-inputp)))

      (hkk/set-leader-keys
       "s`" 'helm-ag-pop-stack
       ;; buffer
       "sb" 'hkk/helm-buffers-smart-do-search
       "sB" 'hkk/helm-buffers-smart-do-search-region-or-symbol
       ;; files
       "sf" 'hkk/helm-files-smart-do-search
       "saf" 'helm-do-ag
       )
      )

    :config
    (progn
      (advice-add 'helm-ag--save-results :after 'hkk//gne-init-helm-ag)
      (evil-define-key 'normal helm-ag-map "SPC" hkk-default-map)))

#+end_src

#+RESULTS:

Powerline.
#+begin_src elisp
  (use-package powerline
    :ensure t
    :init
    (progn
      (if (display-graphic-p)
          (setq powerline-default-separator 'arrow)
        (setq powerline-default-separator 'utf-8))))
#+end_src

Restart emacs.
#+begin_src elisp
    (use-package restart-emacs
      :ensure t
      :defer t)

#+end_src


Popwin
#+begin_src elisp
  (use-package popwin
    :config
    (progn
      (popwin-mode 1)
      (hkk/set-leader-keys "wpm" 'popwin:messages)
      (hkk/set-leader-keys "wpp" 'popwin:close-popup-window)

      (setq popwin:special-display-config nil)

      (push '("*Help*" :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config)
      (push '("*undo-tree*" :dedicated t :position bottom :stick t :noselect t :height 0.4) popwin:special-display-config)
      (push '("*grep*" :dedicated t :position bottom :stick t :noselect t) popwin:special-display-config)))
#+end_src

#+begin_src elisp
  (use-package savehist
    :init
    (progn
      (setq savehist-file (concat user-emacs-directory "savehist")
            enable-recursive-minibuffers t
            history-length 1000
            savehist-additional-variables '(mark-ring
                                            global-mark-ring
                                            search-ring
                                            regexp-search-ring
                                            extended-command-history)
            savehist-autosave-interval 60)
      (savehist-mode t)))


  (use-package recentf
    :config
    (progn
      (setq recentf-max-saved-items 1000
            recentf-max-menu-items 25)
      (recentf-mode 1)
      (after 'helm
             (global-set-key (kbd "C-x C-r") 'helm-recentf))))
#+end_src

** Key bindings
#+begin_src elisp
(require 'hkk-keybindings)
#+end_src


#+begin_src elisp

  (setq-default avy-keys '(?a ?u ?i ?e ?t ?s ?r ?n))

    (use-package avy
      :defer t
      :commands (hkk/avy-open-url hkk/avy-goto-url avy-pop-mark)
      :init
      (progn
        (setq avy-all-windows 'all-frames)
        (setq avy-background t)
        (hkk/set-leader-keys
         "jb" 'avy-pop-mark
         "jj" 'evil-avy-goto-char
         "jJ" 'evil-avy-goto-char-2
         "jl" 'evil-avy-goto-line
         "ju" 'hkk/avy-goto-url
         "jw" 'evil-avy-goto-word-or-subword-1
         "xo" 'hkk/avy-open-url))
      :config
      (progn
        (defun hkk/avy-goto-url ()
          (interactive)
          (avy--generic-jump "https?://" nil 'pre))
        (defun hkk/avy-open-url ()
          (interactive)
          (save-excursion
            (hkk/avy-goto-url)
            (browse-url-at-point)))))
#+end_src

** Languages
Setting for elisp.
#+begin_src elisp
(require 'hkk-elisp)
#+end_src

Setting for clojure.
#+begin_src elisp
(require 'hkk-clojure)
#+end_src

Setting for golang.
#+begin_src elisp
(require 'hkk-go)
#+end_src

Setting for ocaml
#+begin_src elisp
(require 'hkk-ocaml)
#+end_src


Setting for markdown
#+begin_src elisp
(require 'hkk-markdown)
#+end_src


* Providing
#+begin_src elisp
(provide 'hkk-core)
#+end_src

#+PROPERTY: tangle "~/.emacs.d/hkk/hkk-core.el"
